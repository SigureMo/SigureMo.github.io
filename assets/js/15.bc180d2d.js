(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{233:function(a,s,t){a.exports=t.p+"assets/img/dynamo-overview.69905ffa.png"},234:function(a,s,t){a.exports=t.p+"assets/img/dynamo-eval-frame.drawio.f8dd9469.png"},235:function(a,s,t){a.exports=t.p+"assets/img/dynamo-compile.drawio.236dde09.png"},236:function(a,s,t){a.exports=t.p+"assets/img/dynamo-simulate-execution.drawio.e6e42641.png"},237:function(a,s,t){a.exports=t.p+"assets/img/dynamo-resume.drawio.9d36d118.png"},303:function(a,s,t){"use strict";t.r(s);var n=t(2),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("最近这一周负责调研 TorchDynamo，唔，也是很久没写博客了嘛，所以就浅记录下，顺便梳理下 Dynamo 中的各个流程和部分细节～")]),a._v(" "),n("p",[a._v("注意本文最初的动机是调研，因此内容排布上可能对新手不是很友好。因为一直没时间整理优化，暂时先这样了。")])]),a._v(" "),n("h2",{attrs:{id:"什么是-torchdynamo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-torchdynamo"}},[a._v("#")]),a._v(" 什么是 TorchDynamo")]),a._v(" "),n("p",[a._v("TorchDynamo 是一个 Python JIT 编译器，可以提高 PyTorch 代码的运行速度。那，它是怎么做到的呢？")]),a._v(" "),n("h3",{attrs:{id:"torchdynamo-总览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#torchdynamo-总览"}},[a._v("#")]),a._v(" TorchDynamo 总览")]),a._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"TorchDynamo Overview","data-src":t(233),loading:"lazy"}})]),a._v(" "),n("p",[a._v("这里本想自己画一个流程图的，不过最后发现 Torch 文档里的这张图本身已经足够说明 TorchDynamo 的工作流程了，所以这里就直接用啦～")]),a._v(" "),n("p",[a._v("对于一个 Python 函数来说，默认当然就是直接用 Python 解释器来执行了，或者更严谨一点来说会将此时的 Frame 会交给 Python 解释器来 Eval。而 "),n("a",{attrs:{href:"https://peps.python.org/pep-0523/",target:"_blank",rel:"noopener noreferrer"}},[a._v("PEP 523"),n("OutboundLink")],1),a._v(" 为我们提供了一个修改 Python 解释器 Eval Frame 行为的方法，让我们能够可以自己来解释执行 Frame。TorchDynamo 便是基于此原理来实现的。")]),a._v(" "),n("p",[a._v("对于同样一个 Python 函数，TorchDynamo 会在 Eval Frame 时通过编译将原始的 Frame 转换成一个新的 Frame，两者主要差异在于字节码上，这个新的 Frame 同样会交给 Python 解释器来执行，也就是说 TorchDynamo 的主要工作是在 Eval Frame 初期的字节码变换过程。")]),a._v(" "),n("p",[a._v("图中我们会看到有一个 Guards，它是用来保护 Cache 中直接获取的 CodeObject 的，对于同一个函数的 CodeObject，并不是说编译一次对于之后所有的输入都是可用的，因为 TorchDynamo 的编译过程强依赖于输入类型和值等信息，因此第一次编译后的 CodeObject 可能对于第二次输入是不适用的，Guard 便是用来检查此项的，当 Guard 检查失败时，就会触发重新编译。")]),a._v(" "),n("h3",{attrs:{id:"torchdynamo-编译过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#torchdynamo-编译过程"}},[a._v("#")]),a._v(" TorchDynamo 编译过程")]),a._v(" "),n("p",[a._v("TorchDynamo 在编译过程中会逐字节码进行模拟执行，相当于实现了一个简版的 Python 解释器，在这个过程中会收集所有栈上变量的信息，以及其相关的操作，这也是为什么图中会写「dynamic bytecode analysis」，区别于静态分析，TorchDynamo 可以从 Frame 的 "),n("code",[a._v("f_locals")]),a._v(" 字段里找到函数的输入，进而将整个函数运行过程模拟出来。")]),a._v(" "),n("p",[a._v("在模拟执行的过程中，如果 TorchDynamo 遇到了 Tensor，就会创建一个 FX Proxy，开始 FX Graph 组网过程，即开始 trace。")]),a._v(" "),n("p",[a._v("在模拟执行结束时，首先会从 FX Graph 生成 Python 函数，并将其挂载到 globals 里。之后在生成的字节码里先将这个函数 LOAD 到栈里，然后将所有输入也 LOAD 到栈上，之后 CALL 这个函数。当然，仅仅凭借如此是无法把全部操作都还原的，对于一些 Python 的 SideEffects，还需要在最后生成相关代码来处理。")]),a._v(" "),n("p",[a._v("这里真正起到加速作用的是 FX Graph，FX Graph 是可以交给各种后端进行编译加速的，比如默认的 TorchInductor 会将 FX Graph 编译到 Triton（GPU）或 C++/OpenMP（CPU）。")]),a._v(" "),n("h2",{attrs:{id:"eval-frame-原理和执行流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eval-frame-原理和执行流程"}},[a._v("#")]),a._v(" Eval Frame 原理和执行流程")]),a._v(" "),n("h3",{attrs:{id:"frameobject-和-codeobject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#frameobject-和-codeobject"}},[a._v("#")]),a._v(" FrameObject 和 CodeObject")]),a._v(" "),n("p",[a._v("CodeObject 是指 Python 经过编译后产生的代码对象，它主要包含了 Python 字节码及其相关信息，比如常量表、变量名表等。")]),a._v(" "),n("p",[a._v("FrameObject 是指在函数运行时的栈帧，包含编译时产生的 CodeObject 以及一些运行时的参数信息等。")]),a._v(" "),n("p",[a._v("简单来说，CodeObject 是一个编译时的产物，而 FrameObject 时一个运行时的概念，同一个函数多次运行会产生多个 FrameObject，而其对应的 CodeObject 是同一个。")]),a._v(" "),n("h3",{attrs:{id:"pep-523"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pep-523"}},[a._v("#")]),a._v(" PEP 523")]),a._v(" "),n("p",[n("a",{attrs:{href:"https://peps.python.org/pep-0523/",target:"_blank",rel:"noopener noreferrer"}},[a._v("PEP 523"),n("OutboundLink")],1),a._v(" 的标题是 Adding a frame evaluation API to CPython，即为 CPython 添加一个用来 Eval Frame 的 API。这个提案为 JIT 编译提供了可能，允许 JIT 编译器在 Eval Frame 时执行自己的一些操作，比如重新编译原有 CodeObject 生成新的 CodeObject 等。")]),a._v(" "),n("p",[a._v("因此该提案在 "),n("code",[a._v("PyInterpreterState")]),a._v(" 上增加了一个 "),n("code",[a._v("eval_frame")]),a._v(" 字段，即在 Eval Frame 时会调用的函数。其默认值即是直接调用 Python 解释器默认行为 "),n("code",[a._v("_PyEval_EvalFrameDefault")]),a._v(" 函数。而我们可以通过修改它来实现 Eval Frame 行为的自定义，")]),a._v(" "),n("p",[a._v("此外，该提案还在 CodeObject 上添加了一个 "),n("code",[a._v("co_extra")]),a._v(" 字段，以便 JIT 编译器在编译时将一些额外的信息存储在 CodeObject 中，比如编译后的 CodeObject 等。")]),a._v(" "),n("h3",{attrs:{id:"eval-frame-流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eval-frame-流程"}},[a._v("#")]),a._v(" Eval Frame 流程")]),a._v(" "),n("p",[a._v("原理基本都介绍完啦，下面说一下 TorchDynamo 在 Eval Frame 时发生的具体过程。")]),a._v(" "),n("p",[a._v("对于使用 "),n("code",[a._v("torch.compile")]),a._v(" 装饰的函数 "),n("code",[a._v("fn")]),a._v("，torch 会生成一个 "),n("code",[a._v("callback")]),a._v("，用于编译 Frame 生成新的 CodeObject，同时这个函数会被装饰成如下：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[a._v("@functools"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("_fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("**")]),a._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   prior "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" set_eval_frame"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("**")]),a._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("finally")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      set_eval_frame"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("prior"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("p",[a._v("在调用 "),n("code",[a._v("set_eval_frame")]),a._v(" 时，Dynamo 会将通过 "),n("code",[a._v("tstate->interp->eval_frame = &custom_eval_frame_shim;")]),a._v(" 来将 Eval Frame 行为替换成自己的 "),n("code",[a._v("custom_eval_frame_shim")]),a._v("。这样之后调用的 "),n("code",[a._v("fn")]),a._v(" 便是由 Dynamo 自己的 "),n("code",[a._v("custom_eval_frame_shim")]),a._v(" 来执行的。")]),a._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"Dynamo Eval Frame","data-src":t(234),loading:"lazy"}})]),a._v(" "),n("p",[n("code",[a._v("custom_eval_frame_shim")]),a._v(" 的源码分析图如上，我们看一下它具体是如何工作的。")]),a._v(" "),n("p",[a._v("首先，对于 Eval Frame 来说，当然是可以获取到 FrameObject 的，同样也可以从中获取 CodeObject。根据 PEP 523，我们可以在 "),n("code",[a._v("co_extra")]),a._v(" 字段里存储一些 Cache，这里便会存储 Dynamo 编译后的 CodeObject，值得注意的是，这里 "),n("code",[a._v("CacheEntry")]),a._v(" 是同时包含 "),n("code",[a._v("check_fn")]),a._v(" 和 "),n("code",[a._v("code")]),a._v(" 字段的，"),n("code",[a._v("check_fn")]),a._v(" 即是用于检查一个编译后的 CodeObject 是否可用的，"),n("code",[a._v("check_fn")]),a._v(" 会作用于 "),n("code",[a._v("f_locals")]),a._v("（即 "),n("code",[a._v("check_fn(f_locals)")]),a._v("）来检查该 Cache 是否可用。这主要分为以下三种情况：")]),a._v(" "),n("ul",[n("li",[a._v("其中 CacheEntry 是一个链表，默认最大长度为 64，如果查找全部 Cache 都不可用时，就会认为是 cache miss；")]),a._v(" "),n("li",[a._v("而当 "),n("code",[a._v("check_fn(f_locals)")]),a._v(" 检查成功时，就会认为 cache hit；")]),a._v(" "),n("li",[a._v("此外还有一种情况，是 cache 里存储的是 "),n("code",[a._v("SKIP_CODE")]),a._v("。")])]),a._v(" "),n("p",[a._v("另外，Dynamo 会根据 callback 的情况分别执行如下操作：")]),a._v(" "),n("ul",[n("li",[a._v("当 callback 为 "),n("code",[a._v("Py_None")]),a._v(" 时，会直接跑原生字节码，即直接由 "),n("code",[a._v("eval_frame_default")]),a._v(" 来执行；")]),a._v(" "),n("li",[a._v("当 callback 为 "),n("code",[a._v("Py_False")]),a._v(" 时，表示只运行但不 compile，即如果 cache hit 就跑 "),n("code",[a._v("eval_custom_code")]),a._v("，cache miss 就跑 "),n("code",[a._v("eval_frame_default")])]),a._v(" "),n("li",[a._v("当 callback 为一个 callable 函数时，表示运行且 compile，同样在 cache hit 时直接跑 "),n("code",[a._v("eval_custom_code")]),a._v("，而当 cache miss 时，会先调用 "),n("code",[a._v("callback")]),a._v(" 编译出新的 CodeObject，然后将其存入 cache，最后再跑 "),n("code",[a._v("eval_custom_code")]),a._v("。")])]),a._v(" "),n("p",[a._v("值得注意的是，如果调用 "),n("code",[a._v("callback")]),a._v(" 返回的是 "),n("code",[a._v("None")]),a._v(" 时，那么就表示编译失败，此时会将 cache 设置为 "),n("code",[a._v("SKIP_CODE")]),a._v("，并且直接跑 "),n("code",[a._v("eval_frame_default")]),a._v("，而且之后所有的调用都会直接跑 "),n("code",[a._v("eval_frame_default")]),a._v("。即只要有一次编译失败，该函数的之后所有的调用都会直接跑原生字节码。不过这明显是合理的，因为对于一个函数而言，编译失败大概率意味着这个函数是不适合编译加速的，那么之后即便是不同的输入也不会再编译了。")]),a._v(" "),n("p",[n("code",[a._v("eval_custom_code")]),a._v(" 的实现很简单，就是基于原有 FrameObject 创建一个新的，在创建时使用编译后的 CodeObject 即可，最后会将新的 FrameObject 传入 "),n("code",[a._v("eval_frame_default")]),a._v(" 来执行。")]),a._v(" "),n("p",[a._v("也就是说 Dynamo 的 Eval Frame 只会做 CodeObject 的转换，最后还是会让 Python 解释器来实际执行。")]),a._v(" "),n("h2",{attrs:{id:"字节码模拟执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字节码模拟执行"}},[a._v("#")]),a._v(" 字节码模拟执行")]),a._v(" "),n("p",[a._v("那么在 callback 里具体是如何去进行字节码变换的呢？Dynamo 是通过模拟执行 + Codegen 的方式来实现的。在模拟执行时，Dynamo 会收集需要的信息，以在 Codegen 时尽可能地还原 Python 的行为。")]),a._v(" "),n("h3",{attrs:{id:"compile-流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compile-流程"}},[a._v("#")]),a._v(" compile 流程")]),a._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"Dynamo Compile","data-src":t(235),loading:"lazy"}})]),a._v(" "),n("p",[a._v("Dynamo 在 compile 时（也就是 callback）会将逐字节码地模拟执行，在执行过程中如果遇到无法编译的情况，就会抛出 "),n("code",[a._v("SkipFrame")]),a._v("，并在 callback 处返回 "),n("code",[a._v("None")]),a._v("，以标记该 CodeObject 不适合编译。")]),a._v(" "),n("p",[a._v("若模拟执行成功，那么会根据编译得到的 OutputGraph 来生成 "),n("code",[a._v("check_fn")]),a._v("，与 Codegen 得到的 "),n("code",[a._v("code")]),a._v(" 共同组成 "),n("code",[a._v("GuardedCode")]),a._v(" 返回给 Eval Frame。")]),a._v(" "),n("h3",{attrs:{id:"模拟执行流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模拟执行流程"}},[a._v("#")]),a._v(" 模拟执行流程")]),a._v(" "),n("p",[a._v("模拟执行是 Dynamo 的核心，它的所有行为是由 "),n("code",[a._v("InstructionTranslator")]),a._v(" 来定义的。")]),a._v(" "),n("p",[a._v("为了能够尽可能真实地模拟 Python 解释器的行为，"),n("code",[a._v("InstructionTranslator")]),a._v(" 在初始化的时候同时初始化了模拟运行栈 "),n("code",[a._v("stack")]),a._v("、PC "),n("code",[a._v("instruction_pointer")]),a._v("、模拟块栈 "),n("code",[a._v("block_stack")]),a._v("、模拟 locals "),n("code",[a._v("symbolic_locals")]),a._v("、模拟 globals "),n("code",[a._v("symbolic_globals")]),a._v(" 等诸多属性，在之后的模拟运行过程中，会不断与这些状态进行交互。")]),a._v(" "),n("p",[a._v("由于是模拟执行，执行过程中是不会对原有数据进行修改的，为了做到这一点，Dynamo 会将所有栈上数据包装成 "),n("code",[a._v("VariableTracker")]),a._v("，之后所有的操作都会被 "),n("code",[a._v("VariableTracker")]),a._v(" 所记录。")]),a._v(" "),n("p",[n("code",[a._v("symbolic_locals")]),a._v(" 在初始化的时候便会从 "),n("code",[a._v("f_locals")]),a._v(" 包装成 "),n("code",[a._v("VariableTracker")]),a._v("。")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[a._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("symbolic_locals "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" collections"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("OrderedDict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n      k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n      VariableBuilder"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" LocalSource"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("f_locals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" k "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("vars")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" k "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" f_locals\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("因此模拟执行的操作基本都是对 "),n("code",[a._v("VariableTracker")]),a._v(" 子类实例的操作，不会影响原始数据。")]),a._v(" "),n("p",[a._v("在调用 "),n("code",[a._v("InstructionTranslator.run")]),a._v(" 时，Dynamo 会逐步根据字节码 opname 分发到对应的函数，比如 "),n("code",[a._v("LOAD_CONST")]),a._v(" 的实现如下：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("LOAD_CONST")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# For empty tuples, create empty TupleVariable")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("isinstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("argval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("tuple")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("and")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("not")]),a._v(" inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("argval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("push"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("TupleVariable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("push"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ConstantVariable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("argval"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("p",[a._v("这里很简单地将包装后的常量压入了模拟运行栈 "),n("code",[a._v("stack")]),a._v(" 中。")]),a._v(" "),n("p",[a._v("之后看一下稍微复杂一点的 "),n("code",[a._v("BINARY_ADD")]),a._v(" 的实现：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[a._v("BINARY_ADD "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" stack_op"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("operator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("stack_op")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" typing"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Callable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   nargs "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("inspect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("signature"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("parameters"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   fn_var "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" BuiltinVariable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[a._v("@functools"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("impl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"InstructionTranslatorBase"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" inst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Instruction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("push"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("fn_var"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("call_function"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("popn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("nargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" impl\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("这里先用 builtin 函数（这里是 "),n("code",[a._v("operator.add")]),a._v("）创建 "),n("code",[a._v("BuiltinVariable")]),a._v("，然后弹栈两个操作数，传入新的 Variable 调用 "),n("code",[a._v("call_function")]),a._v("，并将结果压栈。")]),a._v(" "),n("p",[a._v("那么这里 "),n("code",[a._v("call_function")]),a._v(" 做了什么呢？由于这里的实现细节比较多，这里只考虑几种简单的情况：")]),a._v(" "),n("ul",[n("li",[a._v("当两个参数都是常量（"),n("code",[a._v("ConstantVariable")]),a._v("），并且可以常量折叠，则直接返回折叠后的 "),n("code",[a._v("ConstantVariable")])]),a._v(" "),n("li",[a._v("如果有参数是 Tensor（"),n("code",[a._v("TensorVariable")]),a._v("），那么创建 FX Proxy，开始 FX Graph 组网")])]),a._v(" "),n("p",[a._v("比如对于如下的代码：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" torch\n\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[a._v("@torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("compile")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Tensor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n   y "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n   x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" x\n\n\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("as_tensor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ny "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br")])]),n("p",[a._v("实际模拟执行可能会类似于下图：")]),a._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"Dynamo Simulate Execution","data-src":t(236),loading:"lazy"}})]),a._v(" "),n("p",[a._v("在执行 "),n("code",[a._v("BINARY_ADD")]),a._v(" 前后，"),n("code",[a._v("stack")]),a._v(" 弹出两个 Variable，并放入一个新的 Variable，同时 FX Graph 也进行了组网。")]),a._v(" "),n("p",[a._v("由于 "),n("code",[a._v("BuiltinVariable")]),a._v(" 表示一个 builtin 操作，是有很多操作是会构建此 Variable 的，比如各种魔法函数，当然 "),n("code",[a._v("print")]),a._v(" 也是，但是 "),n("code",[a._v("call_function")]),a._v(" 时并没有 "),n("code",[a._v("print")]),a._v(" 的处理方式，因此会抛出 "),n("code",[a._v("Unsupported")]),a._v(" 异常打断子图。")]),a._v(" "),n("h3",{attrs:{id:"子图打断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子图打断"}},[a._v("#")]),a._v(" 子图打断")]),a._v(" "),n("p",[a._v("在整个代码运行过程中，主要有以下三种情况会打断子图，触发子图编译：")]),a._v(" "),n("ul",[n("li",[a._v("当遇到 "),n("code",[a._v("RETURN_VALUE")]),a._v(" 时")]),a._v(" "),n("li",[a._v("当遇到跳转指令时，且跳转条件是 Tensor（"),n("code",[a._v("TensorVariable")]),a._v("）时")]),a._v(" "),n("li",[a._v("当内部任意时刻抛出 "),n("code",[a._v("Unsupported")]),a._v(" Error 时")])]),a._v(" "),n("p",[a._v("对于遇到 "),n("code",[a._v("Unsupported")]),a._v(" Error 时，Dynamo 会将当前的子图打断，并将之后的代码抽到一个新的函数中，即交由下一个 Frame 来处理。")]),a._v(" "),n("h3",{attrs:{id:"跳转指令的处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跳转指令的处理"}},[a._v("#")]),a._v(" 跳转指令的处理")]),a._v(" "),n("p",[a._v("跳转指令的处理会稍微复杂一些，Dynamo 会在遇到 JUMP 指令，且跳转条件是 Tensor 的时候，触发子图编译，并将跳转分支分别提取成两个函数，分别对原有的两个分支进行替换。")]),a._v(" "),n("p",[a._v("下面直接通过例子来说明一下：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[a._v("@torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("compile")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      y "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      y "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" y\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("as_tensor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("as_tensor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("对于如上代码来说，由于跳转条件是一个 Tensor，因此是会发生子图打断的，对于函数 "),n("code",[a._v("foo")]),a._v(" 而言，编译前后的字节码分别如下：")]),a._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Before:\n\n 42           0 LOAD_FAST                0 (x)\n              2 LOAD_CONST               1 (0)\n              4 COMPARE_OP               4 (>)\n              6 POP_JUMP_IF_FALSE       10 (to 20)\n\n 43           8 LOAD_FAST                1 (y)\n             10 LOAD_CONST               2 (1)\n             12 INPLACE_ADD\n             14 STORE_FAST               1 (y)\n\n 46          16 LOAD_FAST                1 (y)\n             18 RETURN_VALUE\n\n 45     >>   20 LOAD_FAST                1 (y)\n             22 LOAD_CONST               2 (1)\n             24 INPLACE_SUBTRACT\n             26 STORE_FAST               1 (y)\n\n 46          28 LOAD_FAST                1 (y)\n             30 RETURN_VALUE\n\nAfter:\n\n 40           0 LOAD_GLOBAL              0 (__compiled_fn_0)\n              2 LOAD_FAST                0 (x)\n              4 CALL_FUNCTION            1\n              6 UNPACK_SEQUENCE          1\n              8 POP_JUMP_IF_FALSE        9 (to 18)\n             10 LOAD_GLOBAL              1 (__resume_at_8_1)\n             12 LOAD_FAST                1 (y)\n             14 CALL_FUNCTION            1\n             16 RETURN_VALUE\n        >>   18 LOAD_GLOBAL              2 (__resume_at_20_2)\n             20 LOAD_FAST                1 (y)\n             22 CALL_FUNCTION            1\n             24 RETURN_VALUE\n\n__resume_at_8_1:\n\n 42           0 JUMP_ABSOLUTE            5 (to 10)\n              2 LOAD_FAST                1 (x)\n              4 LOAD_CONST               1 (0)\n              6 COMPARE_OP               4 (>)\n              8 POP_JUMP_IF_FALSE       11 (to 22)\n\n 43     >>   10 LOAD_FAST                0 (y)\n             12 LOAD_CONST               2 (1)\n             14 INPLACE_ADD\n             16 STORE_FAST               0 (y)\n\n 46          18 LOAD_FAST                0 (y)\n             20 RETURN_VALUE\n\n 45     >>   22 LOAD_FAST                0 (y)\n             24 LOAD_CONST               2 (1)\n             26 INPLACE_SUBTRACT\n             28 STORE_FAST               0 (y)\n\n 46          30 LOAD_FAST                0 (y)\n             32 RETURN_VALUE\n\n__resume_at_20_2:\n\n 42           0 JUMP_ABSOLUTE           11 (to 22)\n              2 LOAD_FAST                1 (x)\n              4 LOAD_CONST               1 (0)\n              6 COMPARE_OP               4 (>)\n              8 POP_JUMP_IF_FALSE       11 (to 22)\n             10 LOAD_FAST                0 (y)\n             12 LOAD_CONST               2 (1)\n             14 INPLACE_ADD\n             16 STORE_FAST               0 (y)\n             18 LOAD_FAST                0 (y)\n             20 RETURN_VALUE\n\n 45     >>   22 LOAD_FAST                0 (y)\n             24 LOAD_CONST               2 (1)\n             26 INPLACE_SUBTRACT\n             28 STORE_FAST               0 (y)\n\n 46          30 LOAD_FAST                0 (y)\n             32 RETURN_VALUE\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br"),n("span",{staticClass:"line-number"},[a._v("39")]),n("br"),n("span",{staticClass:"line-number"},[a._v("40")]),n("br"),n("span",{staticClass:"line-number"},[a._v("41")]),n("br"),n("span",{staticClass:"line-number"},[a._v("42")]),n("br"),n("span",{staticClass:"line-number"},[a._v("43")]),n("br"),n("span",{staticClass:"line-number"},[a._v("44")]),n("br"),n("span",{staticClass:"line-number"},[a._v("45")]),n("br"),n("span",{staticClass:"line-number"},[a._v("46")]),n("br"),n("span",{staticClass:"line-number"},[a._v("47")]),n("br"),n("span",{staticClass:"line-number"},[a._v("48")]),n("br"),n("span",{staticClass:"line-number"},[a._v("49")]),n("br"),n("span",{staticClass:"line-number"},[a._v("50")]),n("br"),n("span",{staticClass:"line-number"},[a._v("51")]),n("br"),n("span",{staticClass:"line-number"},[a._v("52")]),n("br"),n("span",{staticClass:"line-number"},[a._v("53")]),n("br"),n("span",{staticClass:"line-number"},[a._v("54")]),n("br"),n("span",{staticClass:"line-number"},[a._v("55")]),n("br"),n("span",{staticClass:"line-number"},[a._v("56")]),n("br"),n("span",{staticClass:"line-number"},[a._v("57")]),n("br"),n("span",{staticClass:"line-number"},[a._v("58")]),n("br"),n("span",{staticClass:"line-number"},[a._v("59")]),n("br"),n("span",{staticClass:"line-number"},[a._v("60")]),n("br"),n("span",{staticClass:"line-number"},[a._v("61")]),n("br"),n("span",{staticClass:"line-number"},[a._v("62")]),n("br"),n("span",{staticClass:"line-number"},[a._v("63")]),n("br"),n("span",{staticClass:"line-number"},[a._v("64")]),n("br"),n("span",{staticClass:"line-number"},[a._v("65")]),n("br"),n("span",{staticClass:"line-number"},[a._v("66")]),n("br"),n("span",{staticClass:"line-number"},[a._v("67")]),n("br"),n("span",{staticClass:"line-number"},[a._v("68")]),n("br"),n("span",{staticClass:"line-number"},[a._v("69")]),n("br"),n("span",{staticClass:"line-number"},[a._v("70")]),n("br"),n("span",{staticClass:"line-number"},[a._v("71")]),n("br"),n("span",{staticClass:"line-number"},[a._v("72")]),n("br"),n("span",{staticClass:"line-number"},[a._v("73")]),n("br"),n("span",{staticClass:"line-number"},[a._v("74")]),n("br"),n("span",{staticClass:"line-number"},[a._v("75")]),n("br"),n("span",{staticClass:"line-number"},[a._v("76")]),n("br"),n("span",{staticClass:"line-number"},[a._v("77")]),n("br"),n("span",{staticClass:"line-number"},[a._v("78")]),n("br"),n("span",{staticClass:"line-number"},[a._v("79")]),n("br"),n("span",{staticClass:"line-number"},[a._v("80")]),n("br"),n("span",{staticClass:"line-number"},[a._v("81")]),n("br"),n("span",{staticClass:"line-number"},[a._v("82")]),n("br"),n("span",{staticClass:"line-number"},[a._v("83")]),n("br"),n("span",{staticClass:"line-number"},[a._v("84")]),n("br"),n("span",{staticClass:"line-number"},[a._v("85")]),n("br")])]),n("p",[a._v("字节码上可能并不是很清晰，这里用一张图来说明下：")]),a._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"Dynamo Resume","data-src":t(237),loading:"lazy"}})]),a._v(" "),n("p",[a._v("可以看到，生成的字节码中，一方面包含了子图编译的函数，另一方面，将是否跳转对应的两个分支抽取到了新的 resume 函数中，这样在这个函数，根据 Tensor 值来跳转的问题就解决了，下个分支的问题，交由下个 Frame 处理即可，这样问题就分解了。")]),a._v(" "),n("p",[a._v("值得注意的是，在字节码层面，我们不应该去过分的苛求还原原有的分支结构，在这里我们只会注意跳转的与否，如果不跳转，就是走 BLOCK 1 + BLOCK 2，如果跳转，就是走 BLOCK 1，在字节码层面这是很清晰、很明确的事情。这样的话，我们就无需再去考虑它从代码层面是 if-else 还是 for/while-loop，因为在字节码层面他们都是 JUMP，都会归结成这一种模式。那嵌套的怎么办？嵌套在字节码层面本质就是多个 JUMP 指令，但对于我们来说，只需要关注第一个 JUMP 就可以了，第二个 JUMP 已经移交到下个 Frame 处理了。")]),a._v(" "),n("h2",{attrs:{id:"代码生成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码生成"}},[a._v("#")]),a._v(" 代码生成")]),a._v(" "),n("p",[a._v("从端到端来说，整个 Dynamo 做的事就是 "),n("code",[a._v("code")]),a._v(" -> "),n("code",[a._v("code")]),a._v("，也就是说整个过程一定是一种代码变换，而我们之前模拟执行的主要目的是收集信息，之后还需要 Codegen 来生成需要的代码。")]),a._v(" "),n("p",[a._v("Dynamo 的代码生成部分大多都是非常简单易懂的，resume 部分生成的代码已经在上面展示过了，下面展示下子图编译的代码生成。")]),a._v(" "),n("h3",{attrs:{id:"子图编译代码生成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子图编译代码生成"}},[a._v("#")]),a._v(" 子图编译代码生成")]),a._v(" "),n("p",[a._v("子图编译时的代码生成主要包含以下几步：")]),a._v(" "),n("ul",[n("li",[a._v("将 FX Graph 编译成函数，这个过程会调用用户提供的 compiler backend，并将该函数挂到 globals 里")]),a._v(" "),n("li",[a._v("在生成字节码里加上从 globals 里 LOAD 刚刚编译好的函数的字节码")]),a._v(" "),n("li",[a._v("在生成字节码里加上 LOAD 需要传入的参数，注意所有参数都是知道来源（Source）的，因此可以 Codegen 出需要的 LOAD 指令")]),a._v(" "),n("li",[a._v("在生成字节码里加上 CALL_FUNCTION 指令，调用编译好的函数")]),a._v(" "),n("li",[a._v("在生成字节码里加上 SideEffects 的处理")])]),a._v(" "),n("p",[a._v("我们从一个示例来看这个过程：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" value\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[a._v("@torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("compile")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value\n\nfoo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Tensor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br")])]),n("p",[a._v("生成的代码大致如下（因为生成的代码是字节码层面的，这里手动还原成 Python 代码）：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 这个函数只有字节码，没有 Python 源码，这是手动翻译过来的")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   out "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" compiled_fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 这里直接放在栈上没有取走，所以最后 return 的时候会 return 这个，这里尽可能还原字节码顺序，不把这个放在 return 后面")]),a._v("\n   x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# SideEffects 生成的")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# out[0]")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 这个函数是 FX graph 生成的")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("compiled_fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("y_value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   add "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y_value\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("p",[a._v("值得注意的是，这里两个函数里包含了常量 4，这个 4 是 "),n("code",[a._v("x.value += 1")]),a._v(" 生成的，也就是说这个输入已经硬编码在输出的代码里了，为了保证其正确性，Dynamo 在 Guard 里包含了 "),n("code",[a._v("L['x'].value == 3")]),a._v(" 的检查项，也就是说只要 "),n("code",[a._v("x.value != 3")]),a._v(" 就会触发重新编译。")]),a._v(" "),n("h3",{attrs:{id:"source-管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#source-管理"}},[a._v("#")]),a._v(" Source 管理")]),a._v(" "),n("p",[a._v("在上面的代码生成过程中，我们提到了 Source，我们可以利用它来重新生成 LOAD 参数的代码，这里看一下 Source 是如何管理的。")]),a._v(" "),n("p",[a._v("在模拟执行的初期，我们从 "),n("code",[a._v("f_locals")]),a._v(" 构建 "),n("code",[a._v("symbolic_locals")]),a._v(" 的时候，就会设置生成的 VariableTracker，使其 Source 为 LocalSource，这样就可以知道这些栈上元素最初是从 "),n("code",[a._v("f_locals")]),a._v(" 里得到的，当然我们就可以生成直接从 "),n("code",[a._v("f_locals")]),a._v(" 里 LOAD 它的指令了。")]),a._v(" "),n("p",[a._v("对于一些复合操作，比如 "),n("code",[a._v("x.y")]),a._v("，在 VariableTracker 的构建过程中，会将 Source 属性进行传播，比如这里 "),n("code",[a._v("x.y")]),a._v(" 对应的 VariableTracker 的 Source 可能就是 "),n("code",[a._v("AttrSource(base=LocalSource(local_name='x'), member='y')")]),a._v("，我们同样也是可以很方便地通过它来生成这个 getattr 操作对应的 Bytecode。")]),a._v(" "),n("h3",{attrs:{id:"guard-管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#guard-管理"}},[a._v("#")]),a._v(" Guard 管理")]),a._v(" "),n("p",[a._v("为了保护生成的代码在下一次调用时是可用的，Dynamo 会为每个生成的代码都加上一个 Guard，这个 Guard 是一个 lambda 函数，形式大概类似 "),n("code",[a._v("lambda L: ___guarded_code.valid and not ___are_deterministic_algorithms_enabled() and ___check_tensors(L['x'], L['y'])")]),a._v("，在 Eval Frame 部分我们已经知道了，这个函数会将 "),n("code",[a._v("f_locals")]),a._v(" 作为参数，因此，这里的 "),n("code",[a._v("L['x']")]),a._v("、"),n("code",[a._v("L['y']")]),a._v(" 即表示输入参数中的 "),n("code",[a._v("x")]),a._v(" 和 "),n("code",[a._v("y")]),a._v("。")]),a._v(" "),n("p",[a._v("比如对于如下代码：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" value\n\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[a._v("@torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("compile")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        y "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        y "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" y\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("as_tensor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br")])]),n("p",[a._v("最后会生成如下的 Guard：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("lambda")]),a._v(" L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" ___guarded_code"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("valid "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("and")]),a._v(" ___check_type_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'x'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("4882921328")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("and")]),a._v(" ___check_type_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'x'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("4299954872")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("and")]),a._v(" L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'x'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("and")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("not")]),a._v(" ___are_deterministic_algorithms_enabled"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("and")]),a._v(" ___check_tensors"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("L"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v("'y'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("这里主要检查了如下几项：")]),a._v(" "),n("ul",[n("li",[n("code",[a._v("x")]),a._v(" 类型是 "),n("code",[a._v("A")])]),a._v(" "),n("li",[n("code",[a._v("x.value")]),a._v(" 类型是 "),n("code",[a._v("int")]),a._v("，这里 "),n("code",[a._v("x.value")]),a._v(" 的代码同样可以从 Source 生成")]),a._v(" "),n("li",[n("code",[a._v("x.value")]),a._v(" 值为 5")]),a._v(" "),n("li",[a._v("关于 "),n("code",[a._v("y")]),a._v(" 的一系列 Tensor 检查，这包含了 "),n("code",[a._v("dtype")]),a._v("、"),n("code",[a._v("device")]),a._v("、"),n("code",[a._v("requires_grad")]),a._v("、"),n("code",[a._v("ndim")]),a._v(" 等属性")])]),a._v(" "),n("p",[a._v("Guard 是有传播机制的，比如 "),n("code",[a._v("z = x + y")]),a._v("，新生成的 "),n("code",[a._v("z")]),a._v(" 的 Guard 是 "),n("code",[a._v("x")]),a._v(" 和 "),n("code",[a._v("y")]),a._v(" 是 Guard 的总和，这可以通过 "),n("code",[a._v("VariableTracker.propagate")]),a._v(" 在不同 VariableTracker 之间进行传播，这就确保了值的依赖关系是可以保持的。")]),a._v(" "),n("h3",{attrs:{id:"sideeffects-管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sideeffects-管理"}},[a._v("#")]),a._v(" SideEffects 管理")]),a._v(" "),n("p",[a._v("由于在模拟执行过程中，我们是可以跟踪任意时刻对于任何变量的操作的，因此任何副作用都是可追踪的，在遇到存在副作用的操作时，我们只需要将其记录下来，并在最终生成的代码里生成相应的副作用代码即可。")]),a._v(" "),n("p",[a._v("比如对于如下明显有副作用的代码：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[a._v("@torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("compile")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("append"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n\n\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("torch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Tensor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("生成的代码大概如下：")]),a._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   out "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" compiled_fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n   x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# SideEffects")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# out[0]")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("compiled_fn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x_0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n   add "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x_0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("p",[a._v("其中 "),n("code",[a._v("x[:] = [x[0], 1]")]),a._v(" 即恢复副作用影响的代码，Dynamo 会将原来的 "),n("code",[a._v("x")]),a._v(" inplace 地全部替换成新的结果 "),n("code",[a._v("[x[0], 1]")])]),a._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[a._v("#")]),a._v(" References")]),a._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://peps.python.org/pep-0523/",target:"_blank",rel:"noopener noreferrer"}},[a._v("PEP 523 – Adding a frame evaluation API to CPython"),n("OutboundLink")],1)]),a._v(" "),n("li",[a._v("TorchDynamo Source: "),n("a",{attrs:{href:"https://github.com/pytorch/pytorch/tree/main/torch/csrc/dynamo",target:"_blank",rel:"noopener noreferrer"}},[a._v("C side"),n("OutboundLink")],1),a._v("、"),n("a",{attrs:{href:"https://github.com/pytorch/pytorch/tree/main/torch/_dynamo",target:"_blank",rel:"noopener noreferrer"}},[a._v("Python side"),n("OutboundLink")],1)]),a._v(" "),n("li",[n("a",{attrs:{href:"https://pytorch.org/docs/stable/dynamo/guards-overview.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("TorchDynamo Overview - Guards Overview"),n("OutboundLink")],1)]),a._v(" "),n("li",[n("a",{attrs:{href:"https://nanguage.gitbook.io/inside-python-vm-cn/",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解 Python 虚拟机"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);